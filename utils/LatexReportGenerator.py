import os
import subprocess
import tempfile
from typing import Dict, List, Optional
from datetime import datetime
from ..Prompt.Language import Language




class LatexReportGenerator:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp()
        self.figure_counter = 0
        print(f"üìÅ LaTeX‰∏¥Êó∂ÁõÆÂΩï: {self.temp_dir}")
        
    def generate_latex_report(self, report_content: str, equation: str, 
                            language: Language, output_path: str = None) -> str:
        """ÁîüÊàêÂÆåÊï¥ÁöÑLaTeXÊä•Âëä - ‰øÆÂ§çÊñá‰ª∂ÁîüÊàêÈóÆÈ¢ò"""
        
        try:
            # Ëß£ÊûêÊä•ÂëäÂÜÖÂÆπ
            sections = self._parse_report_sections(report_content)
            
            # ÁîüÊàêLaTeX‰ª£Á†Å
            latex_code = self._build_latex_document(sections, equation, language)
            
            # Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
            if output_path is None:
                output_dir = "reports"
                os.makedirs(output_dir, exist_ok=True)
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                output_path = os.path.join(output_dir, f"report_{timestamp}")
            else:
                output_dir = os.path.dirname(output_path)
                os.makedirs(output_dir, exist_ok=True)
            
            # ‰øùÂ≠òLaTeXÊñá‰ª∂
            tex_file = f"{output_path}.tex"
            print(f"üìÑ ‰øùÂ≠òLaTeXÊñá‰ª∂: {tex_file}")
            
            with open(tex_file, 'w', encoding='utf-8') as f:
                f.write(latex_code)
            
            # ÁºñËØëLaTeX
            print("üîÑ ÁºñËØëLaTeXÊñá‰ª∂...")
            success = self._compile_latex(tex_file, output_path)
            
            if success and os.path.exists(f"{output_path}.pdf"):
                pdf_path = f"{output_path}.pdf"
                print(f"‚úÖ PDFÊä•ÂëäÁîüÊàêÊàêÂäü: {pdf_path}")
                return pdf_path
            else:
                print("‚ö†Ô∏è PDFÁîüÊàêÂ§±Ë¥•ÔºåËøîÂõûtexÊñá‰ª∂")
                return tex_file
                
        except Exception as e:
            print(f"‚ùå LaTeXÊä•ÂëäÁîüÊàêÂ§±Ë¥•: {e}")
            # ÂàõÂª∫ÁÆÄÂçïÁöÑÊñáÊú¨Êä•Âëä‰Ωú‰∏∫fallback
            return self._create_text_fallback(report_content, equation, output_path)
    
    def _create_text_fallback(self, report_content: str, equation: str, output_path: str) -> str:
        """ÂàõÂª∫ÊñáÊú¨Ê†ºÂºèÁöÑfallbackÊä•Âëä"""
        try:
            text_file = f"{output_path}.txt"
            with open(text_file, 'w', encoding='utf-8') as f:
                f.write(f"ÂæÆÂàÜÊñπÁ®ãÊï∞ÂÄºÂàÜÊûêÊä•Âëä\n")
                f.write("=" * 50 + "\n")
                f.write(f"ÊñπÁ®ã: {equation}\n")
                f.write(f"ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 50 + "\n\n")
                f.write(report_content)
            
            print(f"üìù ÁîüÊàêÊñáÊú¨Êä•Âëä: {text_file}")
            return text_file
        except Exception as e:
            print(f"‚ùå ÊñáÊú¨Êä•ÂëäÁîüÊàê‰πüÂ§±Ë¥•: {e}")
            return "report_failed.txt"
    
    def _parse_report_sections(self, report_content: str) -> Dict[str, str]:
        """Ëß£ÊûêÊä•ÂëäÂÜÖÂÆπ‰∏∫ÂêÑ‰∏™Á´†ËäÇ"""
        sections = {
            "analysis": "",
            "method": "", 
            "code": "",
            "results": "",
            "discussion": ""
        }
        
        lines = report_content.split('\n')
        current_section = "analysis"
        
        for line in lines:
            line = line.strip()
            
            # Ê£ÄÊµãÁ´†ËäÇÊ†áÈ¢ò
            if self._is_section_header(line):
                section_name = self._extract_section_name(line)
                if section_name in sections:
                    current_section = section_name
                continue
                
            # Ê∑ªÂä†Âà∞ÂΩìÂâçÁ´†ËäÇ
            if line and not line.startswith('```'):
                sections[current_section] += line + '\n'
        
        return sections
    
    def _is_section_header(self, line: str) -> bool:
        """Âà§Êñ≠ÊòØÂê¶‰∏∫Á´†ËäÇÊ†áÈ¢ò"""
        header_indicators = ['#', '##', '===', '---', 'ÊñπÁ®ãÂàÜÊûê', 'Êï∞ÂÄºÊñπÊ≥ï', 
                           '‰ª£Á†ÅÂÆûÁé∞', 'ÁªìÊûú', 'ËÆ®ËÆ∫', 'analysis', 'method', 
                           'code', 'results', 'discussion']
        return any(indicator in line for indicator in header_indicators)
    
    def _extract_section_name(self, line: str) -> str:
        """ÊèêÂèñÁ´†ËäÇÂêçÁß∞"""
        line_lower = line.lower()
        
        if any(word in line_lower for word in ['ÊñπÁ®ãÂàÜÊûê', 'equation', 'analysis']):
            return "analysis"
        elif any(word in line_lower for word in ['Êï∞ÂÄºÊñπÊ≥ï', 'method', 'ÁÆóÊ≥ï']):
            return "method" 
        elif any(word in line_lower for word in ['‰ª£Á†Å', 'code', 'ÂÆûÁé∞']):
            return "code"
        elif any(word in line_lower for word in ['ÁªìÊûú', 'results', 'result']):
            return "results"
        elif any(word in line_lower for word in ['ËÆ®ËÆ∫', 'discussion', 'ÁªìËÆ∫']):
            return "discussion"
        else:
            return "analysis"
    
    def _build_latex_document(self, sections: Dict[str, str], equation: str, 
                            language: Language) -> str:
        """ÊûÑÂª∫ÂÆåÊï¥ÁöÑLaTeXÊñáÊ°£"""
        
        # Ê†πÊçÆËØ≠Ë®ÄÈÄâÊã©Ê®°Êùø
        if language == Language.CHINESE:
            return self._chinese_latex_template(sections, equation)
        elif language == Language.ENGLISH:
            return self._english_latex_template(sections, equation)
        elif language == Language.FRENCH:
            return self._french_latex_template(sections, equation)
    
    def _chinese_latex_template(self, sections: Dict[str, str], equation: str) -> str:
        """‰∏≠ÊñáLaTeXÊ®°Êùø"""
        return f"""\\documentclass[12pt]{{article}}
\\usepackage[UTF8]{{ctex}}
\\usepackage{{amsmath}}
\\usepackage{{amssymb}}
\\usepackage{{graphicx}}
\\usepackage{{listings}}
\\usepackage{{xcolor}}
\\usepackage{{geometry}}
\\geometry{{a4paper, margin=2.5cm}}

\\title{{ÂæÆÂàÜÊñπÁ®ãÊï∞ÂÄºÂàÜÊûêÊä•Âëä}}
\\author{{AI Êï∞Â≠¶Âä©Êâã}}
\\date{{\\today}}

\\lstset{{
    language=Python,
    basicstyle=\\ttfamily\\small,
    keywordstyle=\\color{{blue}},
    commentstyle=\\color{{green}},
    stringstyle=\\color{{red}},
    numbers=left,
    numberstyle=\\tiny\\color{{gray}},
    stepnumber=1,
    numbersep=5pt,
    backgroundcolor=\\color{{white}},
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    frame=single,
    tabsize=4,
    captionpos=b,
    breaklines=true,
    breakatwhitespace=false,
    escapeinside={{/*@}}{{@*/}}
}}

\\begin{{document}}

\\maketitle

\\section{{ÈóÆÈ¢òÊèèËø∞}}
\\subsection{{ÂæÆÂàÜÊñπÁ®ã}}
\\begin{{equation}}
    {self._escape_latex(equation)}
\\end{{equation}}

\\section{{ÊñπÁ®ãÂàÜÊûê}}
{sections['analysis']}

\\section{{Êï∞ÂÄºÊñπÊ≥ï}}
{sections['method']}

\\section{{‰ª£Á†ÅÂÆûÁé∞}}
{sections['code']}

\\section{{Êï∞ÂÄºÁªìÊûú}}
{sections['results']}

\\section{{ËÆ®ËÆ∫‰∏éÂàÜÊûê}}
{sections['discussion']}

\\end{{document}}
"""
    
    def _english_latex_template(self, sections: Dict[str, str], equation: str) -> str:
        """Ëã±ÊñáLaTeXÊ®°Êùø"""
        return f"""\\documentclass[12pt]{{article}}
\\usepackage{{amsmath}}
\\usepackage{{amssymb}}
\\usepackage{{graphicx}}
\\usepackage{{listings}}
\\usepackage{{xcolor}}
\\usepackage{{geometry}}
\\geometry{{a4paper, margin=2.5cm}}

\\title{{Numerical Analysis of Differential Equations}}
\\author{{AI Math Assistant}}
\\date{{\\today}}

\\lstset{{
    language=Python,
    basicstyle=\\ttfamily\\small,
    keywordstyle=\\color{{blue}},
    commentstyle=\\color{{green}},
    stringstyle=\\color{{red}},
    numbers=left,
    numberstyle=\\tiny\\color{{gray}},
    stepnumber=1,
    numbersep=5pt,
    backgroundcolor=\\color{{white}},
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    frame=single,
    tabsize=4,
    captionpos=b,
    breaklines=true,
    breakatwhitespace=false,
    escapeinside={{/*@}}{{@*/}}
}}

\\begin{{document}}

\\maketitle

\\section{{Problem Description}}
\\subsection{{Differential Equation}}
\\begin{{equation}}
    {self._escape_latex(equation)}
\\end{{equation}}

\\section{{Equation Analysis}}
{sections['analysis']}

\\section{{Numerical Method}}
{sections['method']}

\\section{{Code Implementation}}
{sections['code']}

\\section{{Numerical Results}}
{sections['results']}

\\section{{Discussion and Analysis}}
{sections['discussion']}

\\end{{document}}
"""
    
    def _french_latex_template(self, sections: Dict[str, str], equation: str) -> str:
        """Ê≥ïÊñáLaTeXÊ®°Êùø"""
        return f"""\\documentclass[12pt]{{article}}
\\usepackage{{amsmath}}
\\usepackage{{amssymb}}
\\usepackage{{graphicx}}
\\usepackage{{listings}}
\\usepackage{{xcolor}}
\\usepackage{{geometry}}
\\geometry{{a4paper, margin=2.5cm}}

\\title{{Analyse Num√©rique des √âquations Diff√©rentielles}}
\\author{{Assistant Math√©matique IA}}
\\date{{\\today}}

\\lstset{{
    language=Python,
    basicstyle=\\ttfamily\\small,
    keywordstyle=\\color{{blue}},
    commentstyle=\\color{{green}},
    stringstyle=\\color{{red}},
    numbers=left,
    numberstyle=\\tiny\\color{{gray}},
    stepnumber=1,
    numbersep=5pt,
    backgroundcolor=\\color{{white}},
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    frame=single,
    tabsize=4,
    captionpos=b,
    breaklines=true,
    breakatwhitespace=false,
    escapeinside={{/*@}}{{@*/}}
}}

\\begin{{document}}

\\maketitle

\\section{{Description du Probl√®me}}
\\subsection{{√âquation Diff√©rentielle}}
\\begin{{equation}}
    {self._escape_latex(equation)}
\\end{{equation}}

\\section{{Analyse de l'√âquation}}
{sections['analysis']}

\\section{{M√©thode Num√©rique}}
{sections['method']}

\\section{{Impl√©mentation du Code}}
{sections['code']}

\\section{{R√©sultats Num√©riques}}
{sections['results']}

\\section{{Discussion et Analyse}}
{sections['discussion']}

\\end{{document}}
"""
    
    def _escape_latex(self, text: str) -> str:
        """ËΩ¨‰πâLaTeXÁâπÊÆäÂ≠óÁ¨¶"""
        escape_chars = {
            '&': r'\&',
            '%': r'\%', 
            '$': r'\$',
            '#': r'\#',
            '_': r'\_',
            '{': r'\{',
            '}': r'\}',
            '~': r'\textasciitilde{}',
            '^': r'\textasciicircum{}',
            '\\': r'\textbackslash{}'
        }
        
        for char, replacement in escape_chars.items():
            text = text.replace(char, replacement)
            
        return text
    
    def _compile_latex(self, tex_file: str, output_path: str) -> bool:
        """ÁºñËØëLaTeXÊñá‰ª∂"""
        try:
            output_dir = os.path.dirname(output_path)
            tex_filename = os.path.basename(tex_file)
            
            print(f"üîß ÁºñËØëLaTeX: {tex_filename}")
            
            # Á¨¨‰∏ÄÊ¨°ÁºñËØë
            result1 = subprocess.run([
                'pdflatex', 
                '-interaction=nonstopmode',
                '-output-directory', output_dir,
                tex_file
            ], capture_output=True, text=True, timeout=30)
            
            if result1.returncode != 0:
                print(f"‚ö†Ô∏è Á¨¨‰∏ÄÊ¨°ÁºñËØëÂèØËÉΩÊúâË≠¶Âëä: {result1.stderr}")
            
            # Á¨¨‰∫åÊ¨°ÁºñËØëËß£ÂÜ≥‰∫§ÂèâÂºïÁî®
            result2 = subprocess.run([
                'pdflatex',
                '-interaction=nonstopmode', 
                '-output-directory', output_dir,
                tex_file
            ], capture_output=True, text=True, timeout=30)
            
            # Ê£ÄÊü•ÊòØÂê¶ÁîüÊàêPDF
            pdf_file = f"{output_path}.pdf"
            if os.path.exists(pdf_file):
                return True
            else:
                print(f"‚ùå PDFÊñá‰ª∂Êú™ÁîüÊàê: {pdf_file}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå LaTeXÁºñËØëË∂ÖÊó∂")
            return False
        except FileNotFoundError:
            print("‚ùå Êú™ÊâæÂà∞pdflatexÂëΩ‰ª§ÔºåËØ∑ÂÆâË£ÖLaTeX: sudo apt-get install texlive-latex-base texlive-latex-extra")
            return False
        except Exception as e:
            print(f"‚ùå LaTeXÁºñËØëÈîôËØØ: {e}")
            return False
    
    def cleanup(self):
        """Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂"""
        import shutil
        if os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir)